This project will strive to follow a multi-tiered backlog structure.

The top tier (called the Portfolio Backlog), defines the broad strokes to the project; ie., the stakeholder's most basic needs from the project, and an outline of the developer's major checkpoints along the path to satisfying those needs. The items defined in this tier are not neccessarily tied to a required sequential ordering. Some itmes may be developed in parallel as part of the investigation of new approaches and solutions. 

The middle tier (called the Solution Backlog) should define the core components to each item in the portfolio tier using "capabilities" and "enablers" and should provide an outline of the components needed for 

Portfolio Backlog:
	[x] Research existing technologies.
		- There are several publications and a significant number of monitized (closed source) platforms that provide automated administration on
		  communication mediums such as emails. These sources will inform us where we should invest our efforts, as the subject is thoroughly discussed and the general concensus is that the task of creating an automated tool for identifying action items in an individual's email inbox is non-trivial, and has multiple potential solutions with each possessing a mixed bag of benefits and limitations.

	[o] Aggregate notes from research and synthesize objectives   
		- Objectives should must be chosen such that they can be "optimisitically" reached, given the resources and tools 
		  available to the developer.

	[o] Develop Email access pipeline
		- This shall be a modular process that does 4 things: 
			1. Acess online email client, generate a unique DB ID based upon imap message id, and if not already present in the DB then it downloads 
			   the entire contents of the message to local machine and proceeds with data extraction.
			2. Extract message body content of the email, removing graphical elements for easier analysis of the written information, creating a 
			   container object for the message that is composed of the original message in its entirety along with the simplified message body we just created.
			3. Using the unique DB ID generated in step 1, add the container object created in step 2 to the DB.
			4. Provide an interface for applying classification tool set 

Solution Backlog:
		[x] Build Email downloading, identification, caching functionality.
			- 
		[x] Build Email content extraction functionality
		[o] Build Email caching DB
		[o] Build classification integration interface